version: 0.2

env:
  variables:
    AWS_REGION: us-east-1 # checkfor specific region
    AWS_ACCOUNT_ID: 452444392358  # account id
    CODECOMMIT_REPO_NAME: ekscompletedemo
    IMAGE_REPO_NAME: eksdemoecr # image name
    REPOSITORY_URI: 452444392358.dkr.ecr.us-east-1.amazonaws.com/eksdemoecr
    IMAGE_TAG: v1
    AWS_DEFAULT_REGION: us-east-1
    TF_VERSION: "0.13.1"
    TF_COMMAND: "apply"
  secrets-manager:
    LOGIN: prod/sonar:sonartoken
    HOST: prod/sonar:HOST
    Organization: prod/sonar:Organization
    Project: prod/sonar:Project
    
phases:

  install:
     commands:
        - echo Installing app dependencies...
        - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl
        - chmod +x ./kubectl
        - mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
        - echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
        - source ~/.bashrc
        - echo 'Check kubectl version'
        - kubectl version --short --client
        - aws sts get-caller-identity
        - echo check config 
        - kubectl config view --minify
        - echo check kubectl access
        - kubectl get svc
    commands:
        - apt install unzip -y
        - wget https://releases.hashicorp.com/terraform/${TF_VERSION}_linux_amd64.zip
        - unzip terraform_${TF_VERSION}_linux_amd64.zip
        - mv terraform /usr/local/bin/
        - terraform version
    runtime-versions:
       nodejs: 14.17.3
    commands:
        - apt-get update
        - apt-get install -y jq
        - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.3.0.1492-linux.zip
        - unzip ./sonar-scanner-cli-3.3.0.1492-linux.zip
        - export PATH=$PATH:./sonar-scanner-3.3.0.1492-linux/bin/

  pre_build:
    commands:     
        - sonar-scanner -Dsonar.login=$LOGIN -Dsonar.host.url=$HOST -Dsonar.projectKey=$Project -Dsonar.organization=$Organization
        - sleep 5
        - curl https://sonarcloud.io/api/qualitygates/project_status?projectKey=$Project >result.json
        - cat result.json
        - if [ $(jq -r '.projectStatus.status' result.json) = ERROR ] ; then $CODEBUILD_BUILD_SUCCEEDING -eq 0 ;fi
    
  build:
    commands:
        - echo Building Project
        - echo Finished Building
    commands:
        - aws codecommit get-file --repository-name $CODECOMMIT_REPO_NAME --commit-specifier version_1 --file-path Dockerfile
        - echo Dockerfile
        - echo Build started on `date`
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - echo Building the Docker image...
        - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
        - echo Build completed on `date`
    commands:
        - terraform init
        - terrform fmt
        - terraform plan
        - terraform validate
        - terrform ${TF_COMMAND} -auto-approve

  post_build:
    commands:
        - echo Logging in to Amazon ECR...
        - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 452444392358.dkr.ecr.us-east-1.amazonaws.com
        - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
        - echo Pushing the Docker image...
        - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
        - echo $IMAGE_REPO-NAME
        - echo "Update Kube Config"      
        - aws eks update-kubeconfig --name eksdemocluster
        - ansible-playbook <playbook.yml>
        - printf '[{"name":"Foodapp-Deployment.yml","imageUri":"%s"}]' $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG > build.json
    commands:
        - echo terraform ${TF_COMMAND} completed on 'date'

cache:
  paths:
    - "node_modules/**/*"

artifacts:
  files: 
    - build.json
    - Dockerfile
    - playbook.yml 
    - Foodapp-Deployment.yml
    - Foodapp-IngressService.yml
    - Foodapp-Service.yml